name: Prepare D2X Docker

on:
    workflow_call:
        inputs:
            use_browser:
                description: "Use browser image"
                required: false
                type: boolean
                default: false
            docker_tag:
                description: "Docker image tag to use (defaults to GitHub ref name)"
                required: false
                type: string
                default: ${{ github.ref_name }}
            debug:
                description: "Enable debug mode"
                required: false
                type: boolean
                default: false
        outputs:
            repo_full_name:
                description: "Full name of the repository"
                value: ${{ jobs.prepare.outputs.repo_full_name }}
            docker_image:
                description: "Docker image name"
                value: ${{ jobs.prepare.outputs.docker_image }}
            full_docker_tag:
                description: "Full Docker tag including suffix"
                value: ${{ jobs.prepare.outputs.full_docker_tag }}
            full_image_name:
                description: "Full Docker image name including tag"
                value: ${{ jobs.prepare.outputs.full_image_name }}

jobs:
    prepare:
        runs-on: ubuntu-latest
        outputs:
            repo_full_name: ${{ steps.set_vars.outputs.repo_full_name }}
            docker_image: ${{ steps.set_vars.outputs.docker_image }}
            full_docker_tag: ${{ steps.set_vars.outputs.full_docker_tag }}
            full_image_name: ${{ steps.set_vars.outputs.full_image_name }}
        steps:
            - name: Set variables
              id: set_vars
              run: |
                  REPO_FULL_NAME="${{ github.repository }}"
                  DOCKER_IMAGE="ghcr.io/${REPO_FULL_NAME}"
                  DOCKER_TAG="${{ inputs.docker_tag }}"
                  TAG_SUFFIX=""
                  if [ "${{ inputs.use_browser }}" == "true" ]; then
                    TAG_SUFFIX="-browser"
                  fi
                  FULL_DOCKER_TAG="${DOCKER_TAG}${TAG_SUFFIX}"
                  FULL_IMAGE_NAME="${DOCKER_IMAGE}:${FULL_DOCKER_TAG}"

                  echo "repo_full_name=${REPO_FULL_NAME}" >> $GITHUB_OUTPUT
                  echo "docker_image=${DOCKER_IMAGE}" >> $GITHUB_OUTPUT
                  echo "full_docker_tag=${FULL_DOCKER_TAG}" >> $GITHUB_OUTPUT
                  echo "full_image_name=${FULL_IMAGE_NAME}" >> $GITHUB_OUTPUT

                  # Create a JSON file with the data
                  echo '{
                    "repo_full_name": "'${REPO_FULL_NAME}'",
                    "docker_image": "'${DOCKER_IMAGE}'",
                    "full_docker_tag": "'${FULL_DOCKER_TAG}'",
                    "full_image_name": "'${FULL_IMAGE_NAME}'",
                    "workflow_run_id": "'${{ github.run_id }}'",
                    "workflow_run_number": "'${{ github.run_number }}'",
                    "workflow_run_attempt": "'${{ github.run_attempt }}'",
                    "github_sha": "'${{ github.sha }}'"
                  }' > docker_prep_info.json

            - name: Cache Docker images
              id: cache-docker
              uses: actions/cache@v3
              with:
                  path: /tmp/.docker-cache
                  key: ${{ runner.os }}-docker-${{ steps.set_vars.outputs.full_image_name }}
                  restore-keys: |
                      ${{ runner.os }}-docker-${{ steps.set_vars.outputs.docker_image }}-

            - name: Load cached Docker images
              id: load-cache
              run: |
                  if [ -f /tmp/.docker-cache/images.tar ]; then
                    docker load < /tmp/.docker-cache/images.tar
                    echo "cache_hit=true" >> $GITHUB_OUTPUT
                  else
                    echo "cache_hit=false" >> $GITHUB_OUTPUT
                  fi

            - name: Pull Docker image
              id: pull-image
              run: |
                  echo "Pulling Docker image: ${{ steps.set_vars.outputs.full_image_name }}"
                  docker pull ${{ steps.set_vars.outputs.fu
