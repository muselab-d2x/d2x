name: 2GP Feature Test and PR Snapshot
on:
    workflow_call:
        inputs:
            debug:
                required: false
                default: false
                description: "Enable debug logging output for CumulusCI"
                type: boolean
            create_pr_snapshot:
                required: false
                default: false
                description: "If true, snapshot functionality is enabled for pull requests. CumulusCI's logic will determine if a snapshot should be created via the github_pull_request_snapshot task."
                type: boolean
            create_failure_snapshot:
                required: false
                default: false
                description: "If true, a snapshot will be created if the build fails. CumulusCI's logic will determine if a snapshot should be created via the github_pull_request_snapshot task."
                type: boolean
            environment_prefix:
                required: false
                description: "If set, a GitHub Environment will be created for the snapshot with this prefix"
                type: string
            commit_status_context:
                required: false
                description: "The context to use for the commit status containing snapshot creation status and details"
                type: string
            parent_workflow_name:
                required: true
                type: string
                description: "The name of the parent workflow that called this workflow. Used to determine if the build has already run and passed."
            triggering_event:
                required: true
                type: string
                description: "The event that triggered the parent workflow (push, pull_request, workflow_dispatch)"
            current_workflow_run_id:
                required: true
                type: string
                description: "The ID of the current workflow run. Used to exclude the current build from the list of running builds."
        secrets:
            dev-hub-auth-url:
                required: false
            gh-email:
                required: true
            github-token:
                required: true
            github-app-id:
                required: false
            github-app-key:
                required: false

jobs:
    check-build-status:
        runs-on: ubuntu-latest
        outputs:
            should_build: ${{ steps.check.outputs.should_build }}
            original_run_url: ${{ steps.check.outputs.original_run_url }}
            in_progress: ${{ steps.check.outputs.in_progress }}
        steps:
            - name: Check build status
              id: check
              env:
                  GITHUB_TOKEN: ${{ secrets.github-token }}
              run: |
                  # Get the commit SHA
                  if [[ "${{ inputs.triggering_event }}" == "pull_request" ]]; then
                    # Delay for 10 seconds to prevent race conditions
                    sleep 10
                    SHA="${{ github.event.pull_request.head.sha }}"
                  else
                    SHA="${{ github.sha }}"
                  fi

                  # Check for existing workflow runs (successful or in progress)
                  workflow_runs=$(gh api -H "Accept: application/vnd.github+json" "/repos/${{ github.repository }}/actions/runs?head_sha=$SHA&event=push" | jq '.workflow_runs[] | select(.name == "${{ inputs.parent_workflow_name }}") | select(.id != ${{ inputs.current_workflow_run_id }}) | {status: .status, conclusion: .conclusion, html_url: .html_url}')

                  successful_run=$(echo "$workflow_runs" | jq 'select(.status == "completed" and .conclusion == "success")')
                  in_progress_run=$(echo "$workflow_runs" | jq 'select(.status == "in_progress")')

                  if [[ -n "$in_progress_run" ]]; then
                    echo "in_progress=true" >> $GITHUB_OUTPUT
                    echo "should_build=false" >> $GITHUB_OUTPUT
                  elif [[ -n "$successful_run" ]]; then
                    if [[ "${{ inputs.triggering_event }}" == "pull_request" ]]; then
                      # Check for existing snapshot status
                      snapshot_status=$(gh api -H "Accept: application/vnd.github+json" "/repos/${{ github.repository }}/commits/$SHA/statuses" | jq '.[] | select(.context | startswith("${{ inputs.commit_status_context }}")) | .state' -r)
                      
                      if [[ -z "$snapshot_status" && ("${{ inputs.create_pr_snapshot }}" == "true" || "${{ inputs.create_failure_snapshot }}" == "true") ]]; then
                        echo "should_build=true" >> $GITHUB_OUTPUT
                      else
                        echo "should_build=false" >> $GITHUB_OUTPUT
                        echo "original_run_url=$(echo "$successful_run" | jq -r '.html_url')" >> $GITHUB_OUTPUT
                      fi
                    else
                      echo "should_build=false" >> $GITHUB_OUTPUT
                      echo "original_run_url=$(echo "$successful_run" | jq -r '.html_url')" >> $GITHUB_OUTPUT
                    fi
                  else
                    echo "should_build=true" >> $GITHUB_OUTPUT
                  fi

    feature-test-and-snapshot:
        needs: check-build-status
        if: needs.check-build-status.outputs.should_build == 'true'
        name: "2GP Feature Test and PR Snapshot"
        runs-on: ubuntu-latest
        container:
            image: ghcr.io/muselab-d2x/d2x:cumulusci-next
            options: --user root
            credentials:
                username: "${{ github.actor }}"
                password: "${{ secrets.github-token }}"
            env:
                DEV_HUB_AUTH_URL: "${{ secrets.dev-hub-auth-url }}"
                DEV_HUB_USERNAME: "${{ secrets.dev-hub-username }}"
                DEV_HUB_CLIENT_ID: "${{ secrets.dev-hub-client-id }}"
                DEV_HUB_PRIVATE_KEY: "${{ secrets.dev-hub-private-key }}"
                CUMULUSCI_SERVICE_github: '{ "username": "${{ github.actor }}", "token": "${{ secrets.github-token }}", "email": "${{ secrets.gh-email }}" }'
                GITHUB_APP_ID: "${{ secrets.github-app-id }}"
                GITHUB_APP_KEY: "${{ secrets.github-app-key }}"
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Auth to DevHub
              run: /usr/local/bin/devhub.sh

            - name: Set feature org as default org
              run: |
                  cci org default feature
                  cci org info feature

            - name: Build Feature Test Package
              id: create_2gp
              run: cci flow run build_feature_test_package $([[ "${{ inputs.debug }}" == "true" ]] && echo " --debug") | tee cumulusci-flow.log
              shell: bash

            - name: Set Commit Status
              env:
                  GITHUB_TOKEN: "${{ secrets.github-token }}"
              run: |
                  VERSION=$(cat cumulusci-flow.log | grep -o -E -m 1 "04t[a-zA-Z0-9]{15}")
                  gh api \
                    --method POST \
                    -H "Accept: application/vnd.github.v3+json" \
                    '/repos/${{ github.repository }}/statuses/${{ github.sha }}' \
                    -f state='success' \
                    -f description="version_id: $VERSION" \
                    -f context='Build Feature Test Package'
              shell: bash

            # - name: Prepare Feature Test Org
            #   id: prepare_org
            #   run: |
            #       cci flow run ci_feature_2gp_pre_snapshot
            #   continue-on-error: true

            - name: Start Snapshot Creation
              if: inputs.create_pr_snapshot == true
              id: start_snapshot
              run: |
                  set -e
                  cci task run github_pull_request_snapshot \
                    --wait False \
                    --build-success ${{ job.status == 'success' }} \
                    --snapshot-is-packaged true || {
                      echo "Snapshot creation failed."
                      exit 1
                    }
                  if [ -f "$GITHUB_OUTPUT" ]; then
                    snapshot_id=$(grep SNAPSHOT_ID $GITHUB_OUTPUT | cut -d '=' -f 2)
                    if [ -n "$snapshot_id" ]; then
                      echo "SNAPSHOT_ID=$snapshot_id" >> $GITHUB_ENV
                    else
                      echo "No SNAPSHOT_ID found in the output."
                      exit 1
                    fi
                  else
                    echo "GITHUB_OUTPUT file not found."
                    exit 1
                  fi
              shell: bash

            - name: Run Feature Test
              id: feature_test
              #if: steps.prepare_org.outcome == 'success'
              run: |
                  cci flow run ci_feature_2gp_post_snapshot
              continue-on-error: true

            - name: Report CumulusCI Errors
              if: always() && (steps.create_2gp.outcome == 'failure' || steps.prepare_org.outcome == 'failure' || steps.feature_test.outcome == 'failure' || steps.start_snapshot.outcome == 'failure')
              run: |
                  echo "CumulusCI encountered an error. Please review the logs for more information."
                  cci error info

            - name: Finalize Snapshot Creation
              id: finalize_snapshot
              if: inputs.create_pr_snapshot == true && steps.start_snapshot|| (inputs.create_failure_snapshot == true && job.status != 'success')
              env:
                  GITHUB_TOKEN: ${{ secrets.github-token }}
              run: |

                  # If the snapshot creation task was run, finalize the snapshot
                  if [[ "${{ inputs.create_pr_snapshot }}" == "true" && -n "${{ steps.start_snapshot.outputs.SNAPSHOT_ID }}" ]]; then
                    cci task run github_pull_request_snapshot \
                        --snapshot-id "${{ steps.start_snapshot.outputs.SNAPSHOT_ID }}" \
                        --build-success "${{ job.status == 'success' }}" \
                        --build-fail-tests "${{ contains(steps.feature_test.outputs.*, 'ApexTestException') }}" \
                        --snapshot-is-packaged true \
                        $([[ -n "${{ inputs.environment_prefix }}" ]] && echo "--github-environment-prefix ${{ inputs.environment_prefix }}") \
                        $([[ -n "${{ inputs.commit_status_context }}" ]] && echo "--commit-status-context ${{ inputs.commit_status_context }}")

                  # If the snapshot creation task was not run, create a snapshot if the build failed
                  elif [[ "${{ inputs.create_failure_snapshot }}" == "true" && "${{ job.status }}" != "success" ]]; then
                    cci task run github_pull_request_snapshot \
                        --build-success false \
                        --build-fail-tests "${{ contains(steps.feature_test.outputs.*, 'ApexTestException') }}" \
                        --snapshot-is-packaged true \
                        $([[ -n "${{ inputs.environment_prefix }}" ]] && echo "--github-environment-prefix ${{ inputs.environment_prefix }}") \
                        $([[ -n "${{ inputs.commit_status_context }}" ]] && echo "--commit-status-context ${{ inputs.commit_status_context }}")
                  fi
              shell: bash

            - name: Delete Scratch Org
              if: ${{ always() }}
              run: cci org scratch_delete feature
              shell: bash

    report-status:
        needs: check-build-status
        if: needs.check-build-status.outputs.should_build == 'false' && needs.check-build-status.outputs.in_progress != 'true'
        runs-on: ubuntu-latest
        steps:
            - name: Report Status
              env:
                  GITHUB_TOKEN: ${{ secrets.github-token }}
              run: |
                  gh api \
                    --method POST \
                    -H "Accept: application/vnd.github+json" \
                    "/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
                    -f state="success" \
                    -f context="${{ inputs.commit_status_context }}" \
                    -f description="Build skipped. Previous successful build found." \
                    -f target_url="${{ needs.check-build-status.outputs.original_run_url }}"

    wait-for-in-progress:
        needs: check-build-status
        if: needs.check-build-status.outputs.in_progress == 'true'
        runs-on: ubuntu-latest
        steps:
            - name: Wait for in-progress workflow
              env:
                  GITHUB_TOKEN: ${{ secrets.github-token }}
              run: |
                  echo "An in-progress workflow was detected. Exiting without reporting a status."
                  exit 0
